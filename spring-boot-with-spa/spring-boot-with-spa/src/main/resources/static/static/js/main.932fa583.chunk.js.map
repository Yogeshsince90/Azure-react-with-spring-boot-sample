{"version":3,"sources":["auth/authProvider.js","App.js","reportWebVitals.js","index.js"],"names":["config","auth","authority","clientId","postLogoutRedirectUri","window","location","origin","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","options","loginType","LoginType","Redirect","tokenRefreshUri","authProvider","MsalAuthProvider","scopes","App","useState","showData","writeData","data","setData","showDataHandler","a","getAccessToken","token","headers","Authorization","accessToken","axios","post","then","res","text","resp","catch","console","log","className","type","onClick","name","style","minWidth","minHeight","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","provider","forceLogin","document","getElementById"],"mappings":"4RAIMA,EAAS,CACbC,KAAM,CACJC,UAAW,yEACXC,SAAU,uCACVC,sBAAuBC,OAAOC,SAASC,OACvCC,mBAAmB,EACnBC,2BAA2B,GAE7BC,MAAO,CACLC,cAAe,eACfC,wBAAwB,IAYtBC,EAAU,CACdC,UAAWC,YAAUC,SACrBC,gBAAiBZ,OAAOC,SAASC,QAGtBW,EAAe,IAAIC,mBAAiBnB,EAZhB,CAC/BoB,OAAQ,CACN,cAU+EP,G,OCIpEQ,MA/Bf,WAAgB,IAAD,EAEWC,mBAAS,CAACC,SAAU,GAAIC,UAAU,KAF7C,mBAENC,EAFM,KAEAC,EAFA,KAIPC,EAAe,uCAAG,8BAAAC,EAAA,sEAEFV,EAAaW,iBAFX,OAEhBC,EAFgB,OAGlB9B,EAAS,CACX+B,QAAS,CAACC,cAAgB,UAAWF,EAAMG,cAG7CC,IAAMC,KAAK,qCAAqC,KAAKnC,GACpDoC,MAAK,SAAAC,GAAG,OACPA,EAAIC,QAELF,MAAK,SAAAG,GAEJb,EAAQ,2BAAID,GAAL,IAAWF,SAAUgB,QAE7BC,MAAMC,QAAQC,KAfO,2CAAH,qDAkBrB,OACM,sBAAKC,UAAU,MAAf,UACF,wBAAQC,KAAK,SAASC,QAASlB,EAAiBmB,KAAK,WAArD,uBACA,qBAAKC,MAAO,CAACC,SAAS,OAAOC,UAAU,OAAQC,gBAAiB,UAAhE,SAA2E,iCAAUzB,EAAKF,aAC1F,qBAAKwB,MAAO,CAACC,SAAS,OAAQC,UAAU,cClB/BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,UAAD,CAASC,SAAU3C,EAAc4C,YAAY,EAA7C,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.932fa583.chunk.js","sourcesContent":["import { MsalAuthProvider, LoginType } from 'react-aad-msal';\r\n \r\n// Msal Configurations\r\n//d255ba17-2b8c-42a1-999c-8afcae7c72c5\r\nconst config = {\r\n  auth: {\r\n    authority: 'https://login.microsoftonline.com/d255ba17-2b8c-42a1-999c-8afcae7c72c5',\r\n    clientId: 'c4acd9a6-9f63-4b37-a080-0b210504ac25',\r\n    postLogoutRedirectUri: window.location.origin,\r\n    validateAuthority: true,\r\n    navigateToLoginRequestUrl: false,\r\n  },\r\n  cache: {\r\n    cacheLocation: \"localStorage\",\r\n    storeAuthStateInCookie: true\r\n  }\r\n};\r\n \r\n// Authentication Parameters\r\nconst authenticationParameters = {\r\n  scopes: [\r\n    'User.Read'\r\n  ]\r\n}\r\n \r\n// Options\r\nconst options = {\r\n  loginType: LoginType.Redirect,\r\n  tokenRefreshUri: window.location.origin \r\n}\r\n \r\nexport const authProvider = new MsalAuthProvider(config, authenticationParameters, options);\r\nexport const authenticateRequest = async (headers) => {\r\n  // Get the authentication token \r\n  const token = await authProvider.getAccessToken();\r\n  console.log((token.accessToken));\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token.accessToken ? `Bearer ${token.accessToken}` : \"\",\r\n    }\r\n  } \r\n};","import axios from 'axios';\nimport './App.css';\nimport { useState } from 'react';\nimport {authProvider} from './auth/authProvider'\nfunction App() {\n  \n  const [data, setData] = useState({showData: '', writeData:''});\n\n  const showDataHandler = async () => {\n    debugger;\n    const token = await authProvider.getAccessToken();\n    let config = {\n      headers: {Authorization : 'Bearer '+ token.accessToken}\n      }\n\n    axios.post('http://localhost:8080/api/showData',null,config)\n    .then(res=>\n      res.text\n    )\n    .then(resp=>{\n      debugger;\n      setData({...data, showData: resp})\n    })\n    .catch(console.log)\n    \n  }\n  return (\n        <div className=\"App\">\n      <button type=\"button\" onClick={showDataHandler} name=\"showData\">SHOW DATA</button>\n      <div style={{minWidth:'50px',minHeight:'50px', backgroundColor: 'yellow'}}><strong >{data.showData}</strong></div>\n      <div style={{minWidth:'50px', minHeight:'50px'}}></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { AzureAD } from 'react-aad-msal';\nimport { authProvider } from '../src/auth/authProvider';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <AzureAD provider={authProvider} forceLogin={true}>\n    <App />\n    </AzureAD>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}